generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model User {
  id                 String       @id @map("_id") @default(auto()) @db.ObjectId
  username           String?      @unique
  email              String?      @unique
  emailVerified      DateTime?
  hashedPassword     String?
  firstName          String?
  lastName           String?
  displayName        String?
  avatar             String?
  bio                String?
  roleId             String?      @db.ObjectId
  role               Role?        @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  permissions        String[]
  status             UserStatus   @default(ACTIVE)
  lastLogin          DateTime?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  createdById        String?      @db.ObjectId
  createdBy          User?        @relation("CreatedUsers", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedById        String?      @db.ObjectId
  updatedBy          User?        @relation("UpdatedUsers", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  accounts           Account[]
  sessions           Session[]
  createdUsers       User[]       @relation("CreatedUsers")
  updatedUsers       User[]       @relation("UpdatedUsers")
  createdRoles       Role[]       @relation("CreatedRoles")
  updatedRoles       Role[]       @relation("UpdatedRoles")
}

model Role {
  id                 String       @id @map("_id") @default(auto()) @db.ObjectId
  name               String       @unique
  description        String?
  permissions        String[]
  isSystem           Boolean      @default(false)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  createdById        String?      @db.ObjectId
  createdBy          User?        @relation("CreatedRoles", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedById        String?      @db.ObjectId
  updatedBy          User?        @relation("UpdatedRoles", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users              User[]
}

model Account {
  id                 String       @id @map("_id") @default(auto()) @db.ObjectId
  userId             String       @db.ObjectId
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?      @db.String
  access_token       String?      @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?      @db.String
  session_state      String?

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id                 String       @id @map("_id") @default(auto()) @db.ObjectId
  sessionToken       String       @unique
  userId             String       @db.ObjectId
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires            DateTime
  
  @@map("sessions")
}

model VerificationToken {
  id                 String       @id @map("_id") @default(auto()) @db.ObjectId
  identifier         String
  token              String       @unique
  expires            DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
